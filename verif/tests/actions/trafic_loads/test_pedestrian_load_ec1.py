# -*- coding: utf-8 -*-
''' Test values of pedestrian loads computed according to EC1.'''

from __future__ import division
from __future__ import print_function


__author__= "Luis C. PÃ©rez Tato (LCPT) and Ana Ortega (AOO)"
__copyright__= "Copyright 2015, LCPT and AOO"
__license__= "GPL"
__version__= "3.0"
__email__= "l.pereztato@gmail.com"

import math
from actions.pedestrian_trafic import EC1_pedestrian_load_models as plm

fs= 2.25 # Hz
walking= True
pedestrianLoad= plm.PedestrianLoad(fs, walking)

ti= list()
vLoad= list()
hLoad= list()
for i in range(0,100):
    t= float(i)/100
    ti.append(t)
    Fv= pedestrianLoad.getVerticalLoad(t)
    vLoad.append(Fv) # Vertical load.
    Fh= pedestrianLoad.getHorizontalLoad(t)
    hLoad.append(Fh) # Horizontal load.

vLoadRef= [481.25000000000006, 485.5134229172761, 498.0533594704137, 518.1369320278219, 544.6016706720202, 575.9392000641792, 610.4031863826082, 646.1332081672126, 681.2850096621038, 714.157141820914, 743.3043294659265, 767.6289957754678, 786.4441397716945, 799.5030580726254, 806.9940461469319, 809.5009964832657, 807.9335104961183, 803.4325434457721, 797.2595167354137, 790.6781081386833, 784.8384671926577, 780.6733584387267, 778.8147298644235, 779.5375187882456, 782.7352776148134, 787.9296057779956, 794.3126193297167, 800.8189961938185, 806.2217183739443, 809.2436856586081, 808.6760544967306, 803.4935668232731, 792.9573245568041, 776.6964220652749, 754.7614959448791, 727.64545881962, 696.269276707653, 661.9334221732055, 626.2383678706597, 590.9799600722567, 558.0275324804803, 529.1940260746577, 506.10805862375366, 490.0977831221337, 482.0954950542812, 482.5703627655376, 491.49448798899, 508.344925539925, 532.1415056949454, 561.5175296272992, 594.817866298501, 630.2168689055208, 665.8470166258996, 699.9283918619677, 730.8890865148857, 757.4673933521427, 778.7881188719988, 794.4074339821599, 804.3231926307924, 808.9503963209095, 809.0642458847518, 805.7157816285757, 800.1272659893441, 793.5760386701548, 787.2764483563785, 782.2695689659686, 779.3297346836999, 778.8955313783774, 781.0308745337148, 785.4193462592989, 791.3922528125464, 797.9881160498016, 804.0387469618829, 808.2748720276938, 809.4426677799877, 806.4216352473654, 798.3340883188424, 784.6371521105053, 765.1895205771075, 740.2872001602339, 710.664911692973, 677.4625422396412, 642.1588162324232, 606.4769705477173, 572.2694631161007, 541.3904405705607, 515.5657020144997, 496.2701421141266, 484.62211690046723, 481.30289169275176, 486.50740319581257, 499.930148849529, 520.7872966632714, 547.8733026520352, 579.6476520429678, 614.3450153637012, 650.1003146564293, 685.0790697301456, 717.6030277618056, 746.2614997466706]

hLoadRef= [-218.75, -217.68019700707916, -214.48657708272393, -209.21622010699375, -201.94664052958632, -192.78437881047168, -181.86306797217807, -169.34101288067507, -155.3983293279798, -140.23369851268632, -124.06079993582074, -107.10449190195172, -89.59681361739189, -71.77288621397133, -53.86679183278742, -36.10751014255561, -18.71499033789625, -1.896433791534001, 14.157141820914106, 29.273991856463915, 43.304329465926415, 56.12255591839309, 67.6289957754679, 77.75110614383891, 86.44413977169444, 93.69125267568914, 99.50305807262527, 103.91663942249052, 106.99404614693182, 108.82030585517951, 109.50099648326564, 109.15943044144525, 107.9335104961183, 105.97232353454748, 103.43254344577217, 100.47471799859741, 97.25951673541361, 93.94401748710453, 90.67810813868321, 87.60107775804475, 84.83846719265775, 82.49924382223712, 80.67335843872682, 79.42973434353318, 78.81472986442353, 78.85110577948855, 79.53751878824565, 80.84855139815272, 82.7352776148134, 85.12635285644745, 87.92960577799555, 91.03409940309433, 94.31261932971653, 97.62453799105488, 100.81899619381853, 103.73833657760906, 106.22171837394434, 108.10883899805077, 109.24368565860806, 109.47823936814093, 108.67605449673069, 106.71563931995502, 103.49356682327306, 98.92725026420662, 92.95732455680414, 85.5495822996907, 76.69642206527492, 66.41777622833835, 54.76149594487917, 41.80318169080994, 27.645458819619957, 12.41670867800804, -3.7307232923469074, -20.62281055766209, -38.0665778267945, -55.853231896109435, -73.76163212934033, -91.56203480068594, -109.02003992774324, -125.90066502665546, -141.9724675195197, -157.01163636841267, -170.80597392534227, -183.15869096572789, -193.89194137624625, -202.85002792726647, -209.90221687786632, -214.9451067127346, -217.90450494571883, -218.73677647337868, -217.4296372344624, -214.00237772412814, -208.50551201100998, -201.01985909079883, -191.655074460075, -180.54766048959374, -167.85849430505453, -153.76992124482527, -138.48247037270082, -122.21125581305189]

err= 0.0
for vLoad1,vLoad2 in zip(vLoad,vLoadRef):
    err+= (vLoad2-vLoad1)**2
for hLoad1,hLoad2 in zip(hLoad,hLoadRef):
    err+= (hLoad2-hLoad1)**2
err= math.sqrt(err)

'''
print(fourierCoefficients)
print(err)
'''

import os
from misc_utils import log_messages as lmsg
fname= os.path.basename(__file__)
if(err<1e-5):
    print('test '+fname+': ok.')
else:
    lmsg.error(fname+' ERROR.')
    
# # Display results
# import matplotlib.pyplot as plt
# plt.plot(ti, vLoad)
# plt.plot(ti, hLoad)
# plt.show()
