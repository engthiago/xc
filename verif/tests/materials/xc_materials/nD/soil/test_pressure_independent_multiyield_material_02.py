# -*- coding: utf-8 -*-
''' Trivial test of the behaviour of PressureIndependentMultiYieldMaterial material class. Home made test.'''

from __future__ import print_function

__author__= "Luis C. PÃ©rez Tato (LCPT) and Ana Ortega (AOO)"
__copyright__= "Copyright 2015, LCPT and AOO"
__license__= "GPL"
__version__= "3.0"
__email__= "l.pereztato@gmail.com"

import math
import xc
from materials import typical_materials

# Define finite element problem.
feProblem= xc.FEProblem()
preprocessor=  feProblem.getPreprocessor

# Define material.
satDensity= 2.3 # saturated mass density (Mg/m3)
H2ODensity= 1.0 # fluid mass density (Mg/m3)

shear= 2.5e4 # shear modulus (kPa)
bulk= 6.2e5 # bulk modulus (kPa)
uBulk= 2.2e5 # undrained bulk modulus (kPa)


cohesion = 45.0 # cohesion (kPa)
phi= 0.0 # friction angle (degrees)

gammaPeak= 0.1 # peak shear strain
refPress= -80.0 # reference pressure (compression, kPa)

pressCoeff = 0.0 # pressure dependency coefficient

numSurf= 22 # number of yield surfaces
soil= typical_materials.defPressureIndependentMultiYieldMaterial(preprocessor, name= '1', nd= 2, rho= satDensity, refShearModul= shear, refBulkModul= bulk, cohesi= cohesion, peakShearStra= gammaPeak, frictionAng= phi, refPress= refPress, pressDependCoe= pressCoeff, numberOfYieldSurf= numSurf, gredu= [])

# Define mesh
## Define nodes.

#         8
# 7 +-----+-----+ 9
#   |           |
#   |     5     |
# 4 +     +     +6
#   |           |
#   |           |
#   +-----+-----+
#   1     2     3
nodeHandler= preprocessor.getNodeHandler
nodeHandler.dimEspace= 2 #two coord. for each node (x,y).

### Define corner nodes.
nodeHandler.numDOFs= 3 #three DOF for each node (Ux,Uy, pore pressure).

n1= nodeHandler.newNodeXY(0.0,0.0)
n3= nodeHandler.newNodeXY(1.0,0.0)
n7= nodeHandler.newNodeXY(0.0,1.0)
n9= nodeHandler.newNodeXY(1.0,1.0)

### Define interior nodes
nodeHandler.numDOFs= 2 #two DOF for each node (Ux,Uy).
n2= nodeHandler.newNodeXY(0.5,0.0)
n4= nodeHandler.newNodeXY(0.0,0.5)
n5= nodeHandler.newNodeXY(0.5,0.5)
n6= nodeHandler.newNodeXY(1.0,0.5)
n8= nodeHandler.newNodeXY(0.5,1.0)

## Define element.
# 
#         p
# l +-----+-----+ k
#   |           |
#   |     r     |
# q +     +     + n   Order of the nodes in the element.
#   |           |
#   |           |
#   +-----+-----+
#   i     m     j
#
elementHandler= preprocessor.getElementHandler
elementHandler.defaultMaterial= soil.name
newElem= elementHandler.newElement("NineFourNodeQuadUP",xc.ID([n1.tag, n3.tag, n9.tag, n7.tag, n2.tag, n6.tag, n8.tag, n4.tag, n5.tag]))

err= 0.0
elemMaterials= newElem.physicalProperties.getVectorMaterials
for soil in elemMaterials:
    err+= (soil.rho-satDensity)**2
    err+= (soil.refShearModulus-shear)**2
    err+= (soil.refBulkModulus-bulk)**2
    err+= (soil.frictionAngle-phi)**2
    err+= (soil.refPressure-refPress)**2
    err+= (soil.peakShearStrain-gammaPeak)**2
    refTangent= xc.Matrix([[653333.333333, 603333.333333, 0], [603333.333333, 653333.333333, 0], [0,0,25000]])
    diffTangent= soil.getTangent()-refTangent
    err+= diffTangent.Norm2()
    diffInitialTangent= soil.getInitialTangent()-refTangent
    err+= diffInitialTangent.Norm2()
    
err= math.sqrt(err)

elemTangent= newElem.getTangentStiff()
refElemTangent= xc.Matrix([[211037, 157083, 0, 27092.6, -48194.4, 0, -7537.04, -17453.7, 0, -49703.7, 48194.4, 0, -228407, 192778, 16740.7, 69814.8, 58629.6, 69814.8, 92740.7, -192778, -120593, -279259],
[157083, 211037, 0, 48194.4, -49703.7, 0, -17453.7, -7537.04, 0, -48194.4, 27092.6, 0, -192778, 92740.7, 69814.8, 58629.6, 69814.8, 16740.7, 192778, -228407, -279259, -120593],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[27092.6, 48194.4, 0, 211037, -157083, 0, -49703.7, -48194.4, 0, -7537.04, 17453.7, 0, -228407, -192778, 92740.7, 192778, 58629.6, -69814.8, 16740.7, -69814.8, -120593, 279259],
[-48194.4, -49703.7, 0, -157083, 211037, 0, 48194.4, 27092.6, 0, 17453.7, -7537.04, 0, 192778, 92740.7, -192778, -228407, -69814.8, 16740.7, -69814.8, 58629.6, 279259, -120593],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[-7537.04, -17453.7, 0, -49703.7, 48194.4, 0, 211037, 157083, 0, 27092.6, -48194.4, 0, 58629.6, 69814.8, 92740.7, -192778, -228407, 192778, 16740.7, 69814.8, -120593, -279259],
[-17453.7, -7537.04, 0, -48194.4, 27092.6, 0, 157083, 211037, 0, 48194.4, -49703.7, 0, 69814.8, 16740.7, 192778, -228407, -192778, 92740.7, 69814.8, 58629.6, -279259, -120593],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[-49703.7, -48194.4, 0, -7537.04, 17453.7, 0, 27092.6, 48194.4, 0, 211037, -157083, 0, 58629.6, -69814.8, 16740.7, -69814.8, -228407, -192778, 92740.7, 192778, -120593, 279259],
[48194.4, 27092.6, 0, 17453.7, -7537.04, 0, -48194.4, -49703.7, 0, -157083, 211037, 0, -69814.8, 16740.7, -69814.8, 58629.6, 192778, 92740.7, -192778, -228407, 279259, -120593],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[-228407, -192778, 0, -228407, 192778, 0, 58629.6, 69814.8, 0, 58629.6, -69814.8, 0, 495704, -4.54747e-13, -120593, -279259, -111704, 5.45697e-12, -120593, 279259, 196741, 0],
[192778, 92740.7, 0, -192778, 92740.7, 0, 69814.8, 16740.7, 0, -69814.8, 16740.7, 0, -4.54747e-13, 830815, -279259, -120593, 3.63798e-12, 111704, 279259, -120593, -1.45519e-11, -920296],
[16740.7, 69814.8, 0, 92740.7, -192778, 0, 92740.7, 192778, 0, 16740.7, -69814.8, 0, -120593, -279259, 830815, -4.54747e-13, -120593, 279259, 111704, -3.63798e-12, -920296, 1.45519e-11],
[69814.8, 58629.6, 0, 192778, -228407, 0, -192778, -228407, 0, -69814.8, 58629.6, 0, -279259, -120593, -4.54747e-13, 495704, 279259, -120593, -5.45697e-12, -111704, 1.09139e-11, 196741],
[58629.6, 69814.8, 0, 58629.6, -69814.8, 0, -228407, -192778, 0, -228407, 192778, 0, -111704, 7.27596e-12, -120593, 279259, 495704, -1.45519e-11, -120593, -279259, 196741, -2.91038e-11],
[69814.8, 16740.7, 0, -69814.8, 16740.7, 0, 192778, 92740.7, 0, -192778, 92740.7, 0, 3.63798e-12, 111704, 279259, -120593, -1.45519e-11, 830815, -279259, -120593, -1.45519e-11, -920296],
[92740.7, 192778, 0, 16740.7, -69814.8, 0, 16740.7, 69814.8, 0, 92740.7, -192778, 0, -120593, 279259, 111704, -3.63798e-12, -120593, -279259, 830815, 1.45519e-11, -920296, 1.45519e-11],
[-192778, -228407, 0, -69814.8, 58629.6, 0, 69814.8, 58629.6, 0, 192778, -228407, 0, 279259, -120593, -3.63798e-12, -111704, -279259, -120593, 4.36557e-11, 495704, 0, 196741],
[-120593, -279259, 0, -120593, 279259, 0, -120593, -279259, 0, -120593, 279259, 0, 196741, 0, -920296, -3.63798e-12, 196741, -1.45519e-11, -920296, 2.91038e-11, 1.92948e+06, 0],
[-279259, -120593, 0, 279259, -120593, 0, -279259, -120593, 0, 279259, -120593, 0, 1.81899e-12, -920296, 1.45519e-11, 196741, -2.91038e-11, -920296, 1.45519e-11, 196741, 0, 1.92948e+06]])

diffTangent= elemTangent-refElemTangent
elemTangentErr= diffTangent.Norm()/refElemTangent.Norm()

elemInitialStiff= newElem.getInitialStiff()
refElemInitial= xc.Matrix([[211037, 157083, 0, 27092.6, -48194.4, 0, -7537.04, -17453.7, 0, -49703.7, 48194.4, 0, -228407, 192778, 16740.7, 69814.8, 58629.6, 69814.8, 92740.7, -192778, -120593, -279259],
[157083, 211037, 0, 48194.4, -49703.7, 0, -17453.7, -7537.04, 0, -48194.4, 27092.6, 0, -192778, 92740.7, 69814.8, 58629.6, 69814.8, 16740.7, 192778, -228407, -279259, -120593],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[27092.6, 48194.4, 0, 211037, -157083, 0, -49703.7, -48194.4, 0, -7537.04, 17453.7, 0, -228407, -192778, 92740.7, 192778, 58629.6, -69814.8, 16740.7, -69814.8, -120593, 279259],
[-48194.4, -49703.7, 0, -157083, 211037, 0, 48194.4, 27092.6, 0, 17453.7, -7537.04, 0, 192778, 92740.7, -192778, -228407, -69814.8, 16740.7, -69814.8, 58629.6, 279259, -120593],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[-7537.04, -17453.7, 0, -49703.7, 48194.4, 0, 211037, 157083, 0, 27092.6, -48194.4, 0, 58629.6, 69814.8, 92740.7, -192778, -228407, 192778, 16740.7, 69814.8, -120593, -279259],
[-17453.7, -7537.04, 0, -48194.4, 27092.6, 0, 157083, 211037, 0, 48194.4, -49703.7, 0, 69814.8, 16740.7, 192778, -228407, -192778, 92740.7, 69814.8, 58629.6, -279259, -120593],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[-49703.7, -48194.4, 0, -7537.04, 17453.7, 0, 27092.6, 48194.4, 0, 211037, -157083, 0, 58629.6, -69814.8, 16740.7, -69814.8, -228407, -192778, 92740.7, 192778, -120593, 279259],
[48194.4, 27092.6, 0, 17453.7, -7537.04, 0, -48194.4, -49703.7, 0, -157083, 211037, 0, -69814.8, 16740.7, -69814.8, 58629.6, 192778, 92740.7, -192778, -228407, 279259, -120593],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[-228407, -192778, 0, -228407, 192778, 0, 58629.6, 69814.8, 0, 58629.6, -69814.8, 0, 495704, -4.54747e-13, -120593, -279259, -111704, 5.45697e-12, -120593, 279259, 196741, 0],
[192778, 92740.7, 0, -192778, 92740.7, 0, 69814.8, 16740.7, 0, -69814.8, 16740.7, 0, -4.54747e-13, 830815, -279259, -120593, 3.63798e-12, 111704, 279259, -120593, -1.45519e-11, -920296],
[16740.7, 69814.8, 0, 92740.7, -192778, 0, 92740.7, 192778, 0, 16740.7, -69814.8, 0, -120593, -279259, 830815, -4.54747e-13, -120593, 279259, 111704, -3.63798e-12, -920296, 1.45519e-11],
[69814.8, 58629.6, 0, 192778, -228407, 0, -192778, -228407, 0, -69814.8, 58629.6, 0, -279259, -120593, -4.54747e-13, 495704, 279259, -120593, -5.45697e-12, -111704, 1.09139e-11, 196741],
[58629.6, 69814.8, 0, 58629.6, -69814.8, 0, -228407, -192778, 0, -228407, 192778, 0, -111704, 7.27596e-12, -120593, 279259, 495704, -1.45519e-11, -120593, -279259, 196741, -2.91038e-11],
[69814.8, 16740.7, 0, -69814.8, 16740.7, 0, 192778, 92740.7, 0, -192778, 92740.7, 0, 3.63798e-12, 111704, 279259, -120593, -1.45519e-11, 830815, -279259, -120593, -1.45519e-11, -920296],
[92740.7, 192778, 0, 16740.7, -69814.8, 0, 16740.7, 69814.8, 0, 92740.7, -192778, 0, -120593, 279259, 111704, -3.63798e-12, -120593, -279259, 830815, 1.45519e-11, -920296, 1.45519e-11],
[-192778, -228407, 0, -69814.8, 58629.6, 0, 69814.8, 58629.6, 0, 192778, -228407, 0, 279259, -120593, -3.63798e-12, -111704, -279259, -120593, 4.36557e-11, 495704, 0, 196741],
[-120593, -279259, 0, -120593, 279259, 0, -120593, -279259, 0, -120593, 279259, 0, 196741, 0, -920296, -3.63798e-12, 196741, -1.45519e-11, -920296, 2.91038e-11, 1.92948e+06, 0],
[-279259, -120593, 0, 279259, -120593, 0, -279259, -120593, 0, 279259, -120593, 0, 1.81899e-12, -920296, 1.45519e-11, 196741, -2.91038e-11, -920296, 1.45519e-11, 196741, 0, 1.92948e+06]])
diffInitial= elemInitialStiff-refElemInitial
elemInitialErr= diffInitial.Norm()/refElemInitial.Norm()
elemInitialStiffError= diffInitial.Norm()/refElemInitial.Norm()

'''
print('err= ', err)
print('elemTangentErr= ', elemTangentErr)
print(elemInitialStiffError)
'''

import os
from misc_utils import log_messages as lmsg
fname= os.path.basename(__file__)
if (abs(err)<1e-4) and (abs(elemTangentErr)<1e-4) and (abs(elemInitialStiffError)<1e-4):
    print('test '+fname+': ok.')
else:
    lmsg.error(fname+' ERROR.')
